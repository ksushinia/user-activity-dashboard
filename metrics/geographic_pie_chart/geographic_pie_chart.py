# geographic_pie_chart.py
import pandas as pd
import matplotlib.pyplot as plt
from pathlib import Path

# Настройки
plt.style.use('seaborn-v0_8')

# Конфигурация
PROJECT_ROOT = Path(__file__).parent.parent.parent
CLICKS_FILE = PROJECT_ROOT / 'processed_data' / 'clicks_processed.parquet'
PLOTS_DIR = PROJECT_ROOT / 'plots' / 'geographic'
PLOTS_DIR.mkdir(parents=True, exist_ok=True)

# Словарь названий регионов
REGION_NAMES = {
    0: "Неопознанный регион",
    1: "Республика Адыгея",
    2: "Республика Башкортостан",
    3: "Республика Бурятия",
    4: "Республика Алтай",
    5: "Республика Дагестан",
    6: "Республика Ингушетия",
    7: "Кабардино-Балкарская Республика",
    8: "Республика Калмыкия",
    9: "Карачаево-Черкесская Республика",
    10: "Республика Карелия",
    11: "Республика Коми",
    12: "Республика Марий Эл",
    13: "Республика Мордовия",
    14: "Республика Саха (Якутия)",
    15: "Республика Северная Осетия - Алания",
    16: "Республика Татарстан",
    17: "Республика Тыва",
    18: "Удмуртская Республика",
    19: "Республика Хакасия",
    20: "Чеченская Республика",
    21: "Чувашская Республика",
    22: "Алтайский край",
    23: "Краснодарский край",
    24: "Красноярский край",
    25: "Приморский край",
    26: "Ставропольский край",
    27: "Хабаровский край",
    28: "Амурская область",
    29: "Архангельская область",
    30: "Астраханская область",
    31: "Белгородская область",
    32: "Брянская область",
    33: "Владимирская область",
    34: "Волгоградская область",
    35: "Вологодская область",
    36: "Воронежская область",
    37: "Ивановская область",
    38: "Иркутская область",
    39: "Калининградская область",
    40: "Калужская область",
    41: "Камчатский край",
    42: "Кемеровская область",
    43: "Кировская область",
    44: "Костромская область",
    45: "Курганская область",
    46: "Курская область",
    47: "Ленинградская область",
    48: "Липецкая область",
    49: "Магаданская область",
    50: "Московская область",
    51: "Мурманская область",
    52: "Нижегородская область",
    53: "Новгородская область",
    54: "Новосибирская область",
    55: "Омская область",
    56: "Оренбургская область",
    57: "Орловская область",
    58: "Пензенская область",
    59: "Пермский край",
    60: "Псковская область",
    61: "Ростовская область",
    62: "Рязанская область",
    63: "Самарская область",
    64: "Саратовская область",
    65: "Сахалинская область",
    66: "Свердловская область",
    67: "Смоленская область",
    68: "Тамбовская область",
    69: "Тверская область",
    70: "Томская область",
    71: "Тульская область",
    72: "Тюменская область",
    73: "Ульяновская область",
    74: "Челябинская область",
    75: "Забайкальский край",
    76: "Ярославская область",
    77: "Москва",
    78: "Санкт-Петербург",
    79: "Еврейская автономная область",
    82: "Республика Крым",
    83: "Ненецкий автономный округ",
    86: "Ханты-Мансийский автономный округ - Югра",
    87: "Чукотский автономный округ",
    89: "Ямало-Ненецкий автономный округ",
    92: "Севастополь",
    101: "Забайкальский край"
}


def load_and_prepare_pie_data(top_n=5):
    """Загрузка данных для круговой диаграммы"""
    print("Загрузка данных для круговой диаграммы...")

    # Загружаем клики
    clicks = pd.read_parquet(CLICKS_FILE)

    # Группируем по регионам и считаем уникальных клиентов
    region_stats = clicks.groupby('region').agg(
        clients_count=('uid', 'nunique')
    ).reset_index()

    # Добавляем названия регионов
    region_stats['region_name'] = region_stats['region'].map(REGION_NAMES)

    # Сортируем по убыванию активности (исключая неопознанные регионы)
    region_stats = region_stats.sort_values('clients_count', ascending=False)

    # Разделяем на опознанные и неопознанные регионы
    known_regions = region_stats[region_stats['region'] != 0]
    unknown_regions = region_stats[region_stats['region'] == 0]

    # Выбираем топ-N опознанных регионов
    top_regions = known_regions.head(top_n)

    # Суммируем остальные опознанные регионы в "Другие"
    other_known_count = known_regions['clients_count'].iloc[top_n:].sum()
    other_known_row = pd.DataFrame({'region': [-1],
                                    'region_name': ['Другие регионы'],
                                    'clients_count': [other_known_count]})

    # Объединяем топ регионы, "Другие" и неопознанные регионы
    pie_data = pd.concat([top_regions, other_known_row, unknown_regions], ignore_index=True)

    return pie_data


def create_pie_chart(data, top_n=5):
    """Создание круговой диаграммы"""
    print("Создание круговой диаграммы...")

    # Подготовка данных
    labels = data['region_name'].astype(str)
    sizes = data['clients_count']

    # Создание диаграммы
    fig, ax = plt.subplots(figsize=(12, 10))

    # Цвета (первые N цветов для топ регионов, серый для "Другие", красный для неопознанных)
    colors = list(plt.cm.tab20c.colors[:top_n]) + ['#cccccc', '#ff9999']

    # Круговая диаграмма
    wedges, texts, autotexts = ax.pie(
        sizes,
        labels=labels,
        colors=colors,
        autopct=lambda p: f'{p:.1f}%\n({int(p * sum(sizes) / 100)})',
        startangle=90,
        wedgeprops={'linewidth': 1, 'edgecolor': 'white'},
        textprops={'fontsize': 9},
        pctdistance=0.8
    )

    # Улучшение отображения процентов
    for autotext in autotexts:
        autotext.set_color('black')
        autotext.set_fontsize(9)
        autotext.set_fontweight('bold')

    # Добавляем легенду
    ax.legend(
        wedges,
        [f"{l} ({s} клиентов)" for l, s in zip(labels, sizes)],
        title="Регионы",
        loc="center left",
        bbox_to_anchor=(1, 0.5),
        fontsize=9
    )

    # Заголовок
    plt.title(f'Горячие точки клиентов (топ-{top_n} регионов)\n', fontsize=14, pad=20)

    # Сохранение
    pie_path = PLOTS_DIR / 'clients_geo_pie_chart.png'
    plt.tight_layout()
    plt.savefig(pie_path, dpi=300, bbox_inches='tight')
    plt.close()
    print(f"Круговая диаграмма сохранена: {pie_path}")


if __name__ == '__main__':
    print("=== Создание круговой диаграммы географического распределения ===")

    # Можно изменить top_n на 7, если нужно больше регионов
    pie_data = load_and_prepare_pie_data(top_n=5)

    if pie_data is not None:
        print(f"Данные для {len(pie_data) - 2} топ-регионов, 'Другие' и 'Неопознанные' загружены")
        create_pie_chart(pie_data, top_n=5)
    else:
        print("Не удалось подготовить данные для визуализации")

    print("Создание диаграммы завершено!")
