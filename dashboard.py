import dash
from dash import dcc, html
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from pathlib import Path
import numpy as np

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
PROJECT_ROOT = Path(__file__).parent.parent.parent

# 1. –î–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–≤—ã–µ 4 —á–∞—Å–∞
df_4hours = pd.read_parquet(
    PROJECT_ROOT / '–•–∞–∫–∞—Ç–æ–Ω' / 'Stream_telecom' / 'processed_data' / 'processed_data_first_4_hours.parquet')

# 2. –î–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
df_days = pd.read_parquet(
    PROJECT_ROOT / '–•–∞–∫–∞—Ç–æ–Ω' / 'Stream_telecom' / 'processed_data' / 'processed_data_per_day.parquet')

# 3. –î–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º
df_months = pd.read_parquet(
    PROJECT_ROOT / '–•–∞–∫–∞—Ç–æ–Ω' / 'Stream_telecom' / 'processed_data' / 'processed_data_per_month.parquet')

# 4. –î–∞–Ω–Ω—ã–µ –¥–∏–Ω–∞–º–∏–∫–∏ –∫–∞–º–ø–∞–Ω–∏–π
daily_dynamics = (pd.read_parquet
    (PROJECT_ROOT / '–•–∞–∫–∞—Ç–æ–Ω' / 'Stream_telecom' /'processed_data' / 'campaign_dynamics_daily.parquet'))
monthly_dynamics = (pd.read_parquet
    (PROJECT_ROOT / '–•–∞–∫–∞—Ç–æ–Ω' / 'Stream_telecom' /'processed_data' / 'campaign_dynamics_monthly.parquet'))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Dash-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = dash.Dash(__name__, external_stylesheets=['styles.css'])
app.title = "–ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–π"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
tooltip_style = {
    'bgcolor': 'rgba(30, 30, 30, 0.9)',
    'font': {'color': 'white', 'family': 'Segoe UI, sans-serif'},
    'bordercolor': 'rgba(255, 202, 40, 0.5)'
}

# 1. –¢–æ–ø-10 –∫–∞–º–ø–∞–Ω–∏–π –ø–æ –∫–ª–∏–∫–∞–º –∑–∞ –ø–µ—Ä–≤—ã–µ 4 —á–∞—Å–∞
fig_top_clicks = px.bar(
    df_4hours.nlargest(10, 'total_clicks').assign(campaign_id=lambda d: d['campaign_id'].astype(str)),
    x='campaign_id',
    y='total_clicks',
    title='–¢–æ–ø-10 –∫–∞–º–ø–∞–Ω–∏–π –ø–æ –∫–ª–∏–∫–∞–º (–ø–µ—Ä–≤—ã–µ 4 —á–∞—Å–∞)',
    color='total_clicks',
    color_continuous_scale=['#ffe082', '#ffca28'],
    labels={'campaign_id': 'ID –∫–∞–º–ø–∞–Ω–∏–∏', 'total_clicks': '–ö–ª–∏–∫–∏'}
)
fig_top_clicks.update_traces(
    hovertemplate="<b>–ö–∞–º–ø–∞–Ω–∏—è:</b> %{x}<br><b>–ö–ª–∏–∫–∏:</b> %{y:,}<extra></extra>"
)

# 2. –ö–ª–∏–∫–∏ –ø–æ –¥–Ω—è–º (—Å —à–∞–≥–æ–º 5 –¥–Ω–µ–π –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)
df_days_sampled = df_days.sort_values('click_date').iloc[::1, :]

fig_daily = px.area(
    df_days_sampled,
    x='click_date',
    y='total_clicks',
    title='–ö–ª–∏–∫–∏ –ø–æ –¥–Ω—è–º',
    line_shape='linear',
    labels={'click_date': '–î–∞—Ç–∞', 'total_clicks': '–ö–ª–∏–∫–∏'}
)
fig_daily.update_traces(
    line=dict(color='#ffca28', width=2),
    fillcolor='rgba(255, 202, 40, 0.2)',
    hovertemplate="<b>–î–∞—Ç–∞:</b> %{x}<br><b>–ö–ª–∏–∫–∏:</b> %{y:,}<extra></extra>"
)

# 3. –ö–ª–∏–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º (–≤—Å–µ –¥–∞–Ω–Ω—ã–µ)
fig_monthly = px.area(
    df_months,
    x='click_month',
    y='total_clicks',
    title='–ö–ª–∏–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º',
    line_shape='linear',
    labels={'click_month': '–ú–µ—Å—è—Ü', 'total_clicks': '–ö–ª–∏–∫–∏'}
)
fig_monthly.update_traces(
    line=dict(color='#4caf50', width=2),
    fillcolor='rgba(76, 175, 80, 0.2)',
    hovertemplate="<b>–ú–µ—Å—è—Ü:</b> %{x}<br><b>–ö–ª–∏–∫–∏:</b> %{y:,}<extra></extra>"
)

# 4. –î–∏–Ω–∞–º–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–π –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
weekdays_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
russian_weekdays = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']

# –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
daily_dynamics['activity_level'] = pd.cut(
    daily_dynamics['campaigns_count'],
    bins=[0, 20, 50, 100, 500, 1000, 2000, 3000, 5000, 10000, np.inf],
    labels=['0-20', '20-50', '50-100', '100-500', '500-1000', '1000-2000', '2000-3000', '3000-5000', '5000-10000', '10000+']
)

fig_weekdays = px.bar(
    daily_dynamics.groupby(['day_of_week', 'activity_level']).size().reset_index(name='count'),
    x='day_of_week',
    y='count',
    color='activity_level',
    category_orders={'day_of_week': weekdays_order},
    title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏',
    labels={'day_of_week': '–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏', 'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π'}
)

# 5. –î–∏–Ω–∞–º–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–π –ø–æ –º–µ—Å—è—Ü–∞–º
months_order = ['January', 'February', 'March', 'April', 'May', 'June',
                'July', 'August', 'September', 'October', 'November', 'December']
russian_months = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω',
                  '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫']

monthly_sum = monthly_dynamics.groupby('month')['campaigns_count'].sum().reset_index()

fig_months = px.bar(
    monthly_sum,
    x='month',
    y='campaigns_count',
    title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –ø–æ –º–µ—Å—è—Ü–∞–º',
    labels={'month': '–ú–µ—Å—è—Ü', 'campaigns_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–ø–∞–Ω–∏–π'},
    color='campaigns_count',
    color_continuous_scale='Blues'
)
fig_months.update_layout(
    xaxis=dict(
        categoryorder='array',
        categoryarray=months_order,
        tickvals=months_order,
        ticktext=russian_months
    )
)

# 6. –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–π
# 6. –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–π (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
heatmap_data = daily_dynamics.pivot_table(
    index='week_of_year',
    columns='day_of_week',
    values='campaigns_count',
    aggfunc='mean'
).sort_index(ascending=False)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–¥–µ–ª–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
for day in weekdays_order:
    if day not in heatmap_data.columns:
        heatmap_data[day] = 0

# –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
heatmap_data = heatmap_data[weekdays_order]

fig_heatmap = go.Figure(data=go.Heatmap(
    z=heatmap_data.values,
    x=[russian_weekdays[weekdays_order.index(d)] for d in heatmap_data.columns],  # –†—É—Å—Å–∫–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –¥–Ω–µ–π
    y=heatmap_data.index.astype(str),  # –ù–µ–¥–µ–ª–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
    colorscale='YlGnBu',
    hoverongaps=False,
    hovertemplate="<b>–ù–µ–¥–µ–ª—è:</b> %{y}<br><b>–î–µ–Ω—å:</b> %{x}<br><b>–ö–∞–º–ø–∞–Ω–∏–π:</b> %{z:.1f}<extra></extra>",
    zmin=0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–π —à–∫–∞–ª—ã
))

fig_heatmap.update_layout(
    title='–°–æ–∑–¥–∞–Ω–æ –∫–∞–º–ø–∞–Ω–∏–π –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ –Ω–µ–¥–µ–ª—è–º –≥–æ–¥–∞',
    xaxis_title='–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
    yaxis_title='–ù–µ–¥–µ–ª—è –≥–æ–¥–∞',
    height=400,  # –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞
    width=458,
    yaxis=dict(
        autorange=True,
        type='category',  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–¥–µ–ª–∏ –∫–∞–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        tickmode='array',
        tickvals=heatmap_data.index.astype(str),
        ticktext=heatmap_data.index.astype(str)
    ),
    xaxis=dict(
        tickmode='array',
        tickvals=[russian_weekdays[weekdays_order.index(d)] for d in weekdays_order],
        ticktext=russian_weekdays
    )
)

# –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
for fig in [fig_top_clicks, fig_daily, fig_monthly, fig_weekdays, fig_months, fig_heatmap]:
    fig.update_layout(
        plot_bgcolor='rgba(0,0,0,0)',
        paper_bgcolor='rgba(0,0,0,0)',
        font={'color': '#f5f5dc', 'size': 12},
        title={'font': {'color': '#fff8dc', 'size': 16}, 'x': 0.5},
        margin=dict(l=40, r=40, t=60, b=40),
        height=350,
        xaxis=dict(showgrid=True, gridcolor='rgba(255,255,255,0.1)', linecolor='rgba(255,255,255,0.3)'),
        yaxis=dict(showgrid=True, gridcolor='rgba(255,255,255,0.1)', linecolor='rgba(255,255,255,0.3)'),
        hoverlabel=tooltip_style,
        coloraxis_showscale=False
    )

# –í—ë—Ä—Å—Ç–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞
app.layout = html.Div([
    html.Div([
        html.H1("üìä –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–π", className="main-header"),
    ], className="header-container"),

    html.Div([
        html.Div([
            html.Div([dcc.Graph(figure=fig_top_clicks, config={'displayModeBar': False})], className="graph-cell"),
            html.Div([dcc.Graph(figure=fig_daily, config={'displayModeBar': False})], className="graph-cell"),
            html.Div([dcc.Graph(figure=fig_monthly, config={'displayModeBar': False})], className="graph-cell")
        ], className="graph-row"),

        html.Div([
            html.Div([dcc.Graph(figure=fig_weekdays, config={'displayModeBar': False})], className="graph-cell"),
            html.Div([dcc.Graph(figure=fig_months, config={'displayModeBar': False})], className="graph-cell"),
            html.Div([dcc.Graph(figure=fig_heatmap, config={'displayModeBar': False})], className="graph-cell-full")
        ], className="graph-row"),
    ], className="dashboard-container")
])

if __name__ == '__main__':
    app.run(debug=True)